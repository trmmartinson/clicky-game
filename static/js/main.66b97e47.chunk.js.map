{"version":3,"sources":["components/Tiles.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","react_default","a","createElement","className","onClick","clicker","num1","src","fileName1","height","width","alt","num2","fileName2","num3","fileName3","num4","fileName4","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","score","chosen","handleClick","num","indexOf","length","setState","message","concat","toConsumableArray","console","log","boxes","randary","base","push","randarray","get_randoms","ary","x","sort","Math","random","_this2","alert","map","offset","Tiles","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAgBeA,MAdf,SAAcC,GACZ,OACFC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OAAOC,QAAS,WAAQL,EAAMM,QAAQN,EAAMO,OAAaC,IAAKR,EAAMS,UAAWC,OAAO,MAAMC,MAAM,MAAMC,IAAI,KAC7HX,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OAAOC,QAAS,WAAQL,EAAMM,QAAQN,EAAMa,OAAaL,IAAKR,EAAMc,UAAWJ,OAAO,MAAMC,MAAM,MAAMC,IAAI,KAC7HX,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OAAOC,QAAS,WAAQL,EAAMM,QAAQN,EAAMe,OAAaP,IAAKR,EAAMgB,UAAWN,OAAO,MAAMC,MAAM,MAAMC,IAAI,KAC7HX,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OAAOC,QAAS,WAAQL,EAAMM,QAAQN,EAAMiB,OAAaT,IAAKR,EAAMkB,UAAWR,OAAO,MAAMC,MAAM,MAAMC,IAAI,SCuFtHO,cA1Fb,SAAAA,IAAc,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAFFI,MAAQ,CAAEC,MAAO,EAAGC,OAAQ,IACdT,EAwCdU,YAAc,SAACC,IAC2B,IAApCX,EAAKO,MAAME,OAAOG,QAAQD,GAEK,KAA7BX,EAAKO,MAAME,OAAOI,QACpBb,EAAKc,SAAS,CAAEN,MAAOR,EAAKO,MAAMC,MAAQ,IAC1CR,EAAKc,SAAS,CAAEN,MAAO,IACvBR,EAAKc,SAAS,CAAEL,OAAQ,KACxBT,EAAKe,QAAU,yCAGff,EAAKc,SAAS,CAAEN,MAAOR,EAAKO,MAAMC,MAAQ,IAC1CR,EAAKc,SAAS,CAAEL,OAAM,GAAAO,OAAAf,OAAAgB,EAAA,EAAAhB,CAAMD,EAAKO,MAAME,QAAjB,CAAyBE,QAIjDX,EAAKc,SAAS,CAAEN,MAAO,IACvBR,EAAKc,SAAS,CAAEL,OAAQ,KACxBT,EAAKe,QAAU,+BAGjBG,QAAQC,IAAI,cAAgBnB,EAAKO,MAAME,SA1DvCT,EAAKe,QAAU,GACff,EAAKoB,MAAQ,GACbpB,EAAKqB,QAAU,GACf,IAAIC,EAAO,aALC,OAMZtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKoB,MAAMG,KAAKD,EAAO,sBACvBtB,EAAKwB,UAAYxB,EAAKyB,cAtBVzB,6EA4BZ,IADA,IAAI0B,EAAM,GACDC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAIH,KAAKI,GACX,OAAOD,EAAIE,KAAK,kBAAMC,KAAKC,SAAW,oFAiC/B,IAAAC,EAAA5B,KAMP,OALIA,KAAKY,QAAQF,OAAS,IACxBmB,MAAM7B,KAAKY,SACXZ,KAAKY,QAAU,IAEjBZ,KAAKkB,QAAUlB,KAAKsB,cAElB5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,mFACAF,EAAAC,EAAAC,cAAA,yEACAF,EAAAC,EAAAC,cAAA,oBAAYoB,KAAKI,MAAMC,MAAvB,MAGD,CAAC,EAAG,EAAG,EAAG,IAAIyB,IAAI,SAACC,GAAD,OACjBrD,EAAAC,EAAAC,cAACoD,EAAD,CAAOjD,QAAS6C,EAAKrB,YACnBrB,UAAW0C,EAAKX,MAAMW,EAAKV,QAAQ,EAAIa,IAAU/C,KAAM4C,EAAKV,QAAQ,EAAIa,GAASE,IAAKL,EAAKV,QAAQ,EAAIa,GACvGxC,UAAWqC,EAAKX,MAAMW,EAAKV,QAAQ,EAAIa,IAAUzC,KAAMsC,EAAKV,QAAQ,EAAIa,GACxEtC,UAAWmC,EAAKX,MAAMW,EAAKV,QAAQ,EAAIa,IAAUvC,KAAMoC,EAAKV,QAAQ,EAAIa,GACxEpC,UAAWiC,EAAKX,MAAMW,EAAKV,QAAQ,EAAIa,IAAUrC,KAAMkC,EAAKV,QAAQ,EAAIa,eArFlEG,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.66b97e47.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Tile(props) {\n  return (\n<div className=\"container\">\n  <div className=\"row\">\n    <div className=\"col-sm\">\n        <img className = \"boxy\" onClick={() => { props.clicker(props.num1) }}     src={props.fileName1} height='142' width='142' alt=\"\" />\n        <img className = \"boxy\" onClick={() => { props.clicker(props.num2) }}     src={props.fileName2} height='142' width='142' alt=\"\" />\n        <img className = \"boxy\" onClick={() => { props.clicker(props.num3) }}     src={props.fileName3} height='142' width='142' alt=\"\" />\n        <img className = \"boxy\" onClick={() => { props.clicker(props.num4) }}     src={props.fileName4} height='142' width='142' alt=\"\" />\n    </div>\n  </div>\n</div>\n  );\n}\nexport default Tile;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Tiles from './components/Tiles'\n\n\nclass App extends Component {\n  state = { score: 0, chosen: [] }\n  constructor() {\n    super()\n    this.message = \"\";\n    this.boxes = [];\n    this.randary = [];\n    let base = \"../images/\";\n    this.boxes.push(base + \"number-0-small.jpg\");\n    this.boxes.push(base + \"number-1-small.jpg\");\n    this.boxes.push(base + \"number-2-small.jpg\");\n    this.boxes.push(base + \"number-3-small.jpg\");\n    this.boxes.push(base + \"number-4-small.jpg\");\n    this.boxes.push(base + \"number-5-small.jpg\");\n    this.boxes.push(base + \"number-6-small.jpg\");\n    this.boxes.push(base + \"number-7-small.jpg\");\n    this.boxes.push(base + \"number-8-small.jpg\");\n    this.boxes.push(base + \"number-9-small.jpg\");\n    this.boxes.push(base + \"letter-L-small.jpg\");\n    this.boxes.push(base + \"letter-b-small.jpg\");\n    this.boxes.push(base + \"letter-c-small.jpg\");\n    this.boxes.push(base + \"letter-i-small.jpg\");\n    this.boxes.push(base + \"letter-p-small.jpg\");\n    this.boxes.push(base + \"letter-z-small.jpg\");\n    this.randarray = this.get_randoms();\n\n  }\n\n  get_randoms() {\n    let ary = [];\n    for (let x = 0; x < 16; x++)\n      ary.push(x);\n    return ary.sort(() => Math.random() - 0.5);\n  }\n\n  componentDidUpdate() {\n   /*j if (this.message.length > 1) {\n      alert(\"didupdate:\" + this.message);\n      this.message = \"\";\n    } */\n  }\n\n  handleClick = (num) => {\n    if (this.state.chosen.indexOf(num) === -1) {\n      // if the score is 15 and it got here it must be perfect!\n      if (this.state.chosen.length === 15) {\n        this.setState({ score: this.state.score + 1 });\n        this.setState({ score: 0 });\n        this.setState({ chosen: [] });\n        this.message = \"Perfect score!!!!  playing again....\";\n      }\n      else {\n        this.setState({ score: this.state.score + 1 });\n        this.setState({ chosen: [...this.state.chosen, num] });\n      }\n    }\n    else {\n      this.setState({ score: 0 });\n      this.setState({ chosen: [] });\n      this.message = \"You lost!  Playing again...\";\n    }\n\n    console.log('chosenlist=' + this.state.chosen);\n  }\n\n  render() {\n    if (this.message.length > 1) {\n      alert(this.message);\n      this.message = \"\";\n    }\n    this.randary = this.get_randoms();\n    return (\n      <div className=\"App\">\n        <div className='jumbotron'>\n          <h1>Clicky game</h1>\n          <h5> Try to click all of the images without selecting the same one twice!</h5>\n          <h5>only super spart people are able to solve this memory game!</h5>\n          <h2>score: {this.state.score} </h2>\n        </div>\n\n        {[0, 4, 8, 12].map((offset) => (\n          <Tiles clicker={this.handleClick}\n            fileName1={this.boxes[this.randary[0 + offset]]} num1={this.randary[0 + offset]} key={this.randary[0 + offset]}\n            fileName2={this.boxes[this.randary[1 + offset]]} num2={this.randary[1 + offset]} \n            fileName3={this.boxes[this.randary[2 + offset]]} num3={this.randary[2 + offset]} \n            fileName4={this.boxes[this.randary[3 + offset]]} num4={this.randary[3 + offset]} \n          />\n        ))}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}